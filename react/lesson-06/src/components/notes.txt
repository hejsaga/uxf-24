VarfÃ¶r state & useEffect lÃ¶ser problem idag
ğŸ”¹ FÃ¤rre rader kod och enklare syntax

Funktionskomponenter med Hooks krÃ¤ver mindre kod Ã¤n klasskomponenter.
Ingen constructor, this, eller separata livscykelmetoder behÃ¶vs.
ğŸ”¹ Tydligare och mer deklarativt

Vi behÃ¶ver inte tÃ¤nka pÃ¥ nÃ¤r exakt en metod ska anropas â€“ React hanterar det Ã¥t oss.
useEffect gÃ¶r det tydligare nÃ¤r nÃ¥got ska ske (vid mount, update eller unmount).
ğŸ”¹ Ã…teranvÃ¤ndbar logik med custom hooks

IstÃ¤llet fÃ¶r att upprepa kod i olika klasskomponenter kan vi skapa egna Hooks.
ğŸ”¹ Undviker problem med this och bindningar

I klasskomponenter var vi ofta tvungna att binda metoder i konstruktorn.
I funktionskomponenter anvÃ¤nds useState och useEffect utan detta problem.